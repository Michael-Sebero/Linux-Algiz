# Maintainer: Peter Jung ptr1337 <admin@ptr1337.dev>
# Maintainer: Piotr Gorski <piotrgorski@cachyos.org>
# Maintainer: Vasiliy Stelmachenok <ventureo@cachyos.org>
# Contributor: Jan Alexander Steffens (heftig) <jan.steffens@gmail.com>
# Contributor: Tobias Powalowski <tpowa@archlinux.org>
# Contributor: Thomas Baechler <thomas@archlinux.org>

### BUILD OPTIONS
# Set these variables to ANYTHING that is not null or choose proper variable to enable them

### Selecting CachyOS config
: "${_cachy_config:=yes}"

### Selecting the CPU scheduler
# ATTENTION - only one of the following values can be selected:
# 'bore' - select 'Burst-Oriented Response Enhancer'
# 'bmq' - select 'BMQ Scheduler'
# 'hardened' - select 'BORE Scheduler hardened' ## kernel with hardened config and hardening patches with the bore scheduler
# 'cachyos' - select 'CachyOS Default Scheduler (BORE)'
# 'eevdf' - select 'EEVDF Scheduler'
# 'rt' - select EEVDF, but includes a series of realtime patches
# 'rt-bore' - select Burst-Oriented Response Enhancer, but includes a series of realtime patches
# 'scx' - select sched-ext framework with runtime scheduler switching
: "${_cpusched:=cachyos}"

### Enhanced sched-ext options (when _cpusched=scx)
# Available sched-ext schedulers: 'scx_simple', 'scx_qmap', 'scx_central', 'scx_pair', 'scx_flatcg', 'scx_userland', 'scx_rusty', 'scx_lavd'
: "${_scx_scheduler:=scx_rusty}"

### BORE scheduler tuning (when using BORE-based schedulers)
# 'balanced' - default BORE settings
# 'performance' - optimized for throughput
# 'responsive' - optimized for desktop responsiveness
# 'gaming' - optimized for gaming workloads
: "${_bore_tuning:=balanced}"

### Tweak kernel options prior to a build via nconfig
: "${_makenconfig:=no}"

### Tweak kernel options prior to a build via xconfig
: "${_makexconfig:=no}"

# Compile ONLY used modules to VASTLYreduce the number of modules built
# and the build time.
#
# To keep track of which modules are needed for your specific system/hardware,
# give module_db script a try: https://aur.archlinux.org/packages/modprobed-db
# This PKGBUILD read the database kept if it exists
#
# More at this wiki page ---> https://wiki.archlinux.org/index.php/Modprobed-db
: "${_localmodcfg:=no}"

# Path to the list of used modules
: "${_localmodcfg_path:="$HOME/.config/modprobed.db"}"

# Use the current kernel's .config file
# Enabling this option will use the .config of the RUNNING kernel rather than
# the ARCH defaults. Useful when the package gets updated and you already went
# through the trouble of customizing your config options.  NOT recommended when
# a new kernel is released, but again, convenient for package bumps.
: "${_use_current:=no}"

### Enable KBUILD_CFLAGS -O3
: "${_cc_harder:=yes}"

### Enhanced compiler optimizations
# Enable even more aggressive optimizations
: "${_cc_ultra:=no}"

### Enable Graphite optimizations (GCC only)
: "${_enable_graphite:=no}"

### Set performance governor as default
: "${_per_gov:=yes}"

### Enable TCP_CONG_BBR3
: "${_tcp_bbr3:=yes}"

### Enhanced network optimizations
# Enable XDP optimizations
: "${_enable_xdp_opt:=yes}"
# Enable advanced TCP features
: "${_tcp_advanced:=yes}"

### Running with a 1000HZ, 750Hz, 600 Hz, 500Hz, 300Hz, 250Hz and 100Hz tick rate
: "${_HZ_ticks:=1000}"

## Choose between perodic, idle or full
### Full tickless can give higher performances in various cases but, depending on hardware, lower consistency.
: "${_tickrate:=full}"

## Choose between full(low-latency), lazy, voluntary or none
: "${_preempt:=full}"

### Enhanced preemption options
# Enable additional preemption improvements
: "${_preempt_enhanced:=yes}"

### Transparent Hugepages
# ATTENTION - one of two predefined values should be selected!
# 'always' - always enable THP
# 'madvise' - madvise, prevent applications from allocating more memory resources than necessary
# More infos here:
# https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/performance_tuning_guide/sect-red_hat_enterprise_linux-performance_tuning_guide-configuring_transparent_huge_pages
: "${_hugepage:=always}"

### Enhanced memory management
# Enable Multi-Gen LRU
: "${_enable_mglru:=yes}"
# Enable advanced memory compaction
: "${_memory_compaction:=yes}"
# Enable ZRAM optimizations
: "${_enable_zram_opt:=yes}"
: "${_zram_algorithm:=lz4}"

### I/O and storage optimizations
# Default I/O scheduler ('mq-deadline', 'kyber', 'bfq', 'none')
: "${_io_scheduler:=mq-deadline}"
# Enable io_uring optimizations
: "${_enable_io_uring_opt:=yes}"
# Enable block layer optimizations  
: "${_block_layer_opt:=yes}"

### Gaming optimizations
# Enable FSYNC patches
: "${_enable_fsync:=yes}"
# Enable FUTEX2 support
: "${_enable_futex2:=yes}"
# Enable advanced gaming optimizations
: "${_gaming_optimizations:=yes}"
# Enable AMD GPU context priority
: "${_enable_amdgpu_ctx_priority:=yes}"

# CPU compiler optimizations - Defaults to native if left empty
# - "native" (use compiler autodetection)
# - "zen4" (Use znver4 compiler optimizations)
# - "zen3" (Use znver3 compiler optimizations) 
# - "zen2" (Use znver2 compiler optimizations)
# - "alderlake" (Use alderlake compiler optimizations)
# - "sapphirerapids" (Use sapphirerapids compiler optimizations)
# - "generic" (kernel's default - to share the package between machines with different CPU Âµarch as long as they are x86-64)
: "${_processor_opt:=native}"

### Enhanced CPU optimizations
# Enable advanced instruction sets
: "${_enable_advanced_isa:=yes}"
# Tune for specific CPU architecture
: "${_tune_native:=yes}"
# CPU optimization level (1, 2, 3, or 'ultra')
: "${_cpu_opt_level:=3}"

# Clang LTO mode, only available with the "llvm" compiler - options are "none", "full" or "thin".
# ATTENTION - one of three predefined values should be selected!
# "full: uses 1 thread for Linking, slow and uses more memory, theoretically with the highest performance gains."
# "thin: uses multiple threads, faster and uses less memory, may have a lower runtime performance than Full."
# "thin-dist: Similar to thin, but uses a distributed model rather than in-process: https://discourse.llvm.org/t/rfc-distributed-thinlto-build-for-kernel/85934"
# "none: disable LTO
: "${_use_llvm_lto:=thin}"

### Enhanced LTO options
# Enable BOLT optimization (Binary Optimization and Layout Tool)
: "${_enable_bolt:=no}"
# Enhanced linking optimizations
: "${_enhanced_linking:=yes}"

# Use suffix -lto only when requested by the user
# yes - enable -lto suffix
# no - disable -lto suffix
# https://github.com/CachyOS/linux-cachyos/issues/36
: "${_use_lto_suffix:=no}"

# Use suffix -gcc when requested by the user
# Enabled by default to show the difference between LTO kernels and GCC kernels
: "${_use_gcc_suffix:=yes}"

# KCFI is a proposed forward-edge control-flow integrity scheme for
# Clang, which is more suitable for kernel use than the existing CFI
# scheme used by CONFIG_CFI_CLANG. kCFI doesn't require LTO, doesn't
# alter function references to point to a jump table, and won't break
# function address equality.
: "${_use_kcfi:=no}"

# Build the zfs module in to the kernel
# WARNING: The ZFS module doesn't build with selected RT sched due to licensing issues.
# If you use ZFS, refrain from building the RT kernel
: "${_build_zfs:=no}"

# Builds the nvidia module and package it into a own base
# This does replace the requirement of nvidia-dkms
: "${_build_nvidia:=no}"

# Builds the open nvidia module and package it into a own base
# This does replace the requirement of nvidia-open-dkms
# Use this only if you have Turing+ GPU
: "${_build_nvidia_open:=no}"

# Build a debug package with non-stripped vmlinux
: "${_build_debug:=no}"

# Enable AUTOFDO_CLANG for the first compilation to create a kernel, which can be used for profiling
# Workflow:
# https://cachyos.org/blog/2411-kernel-autofdo/
# 1. Compile Kernel with _autofdo=yes and _build_debug=yes
# 2. Boot the kernel in QEMU or on your system, see Workload
# 3. Profile the kernel and convert the profile, see Generating the Profile for AutoFDO
# 4. Put the profile into the sourcedir
# 5. Run kernel build again with the _autofdo_profile_name path to profile specified
: "${_autofdo:=no}"

# Name for the AutoFDO profile
: "${_autofdo_profile_name:=}"

# Propeller should be applied, after the kernel is optimized with AutoFDO
# Workflow:
# 1. Proceed with above AutoFDO Optimization, but enable at the final compilation also _propeller
# 2. Boot into the AutoFDO Kernel and profile it
# 3. Convert the profile into the propeller profile, example:
# create_llvm_prof --binary=/usr/src/debug/linux-cachyos-rc/vmlinux --profile=propeller.data --format=propeller --propeller_output_module_name --out=propeller_cc_profile.txt --propeller_symorder=propeller_ld_profile.txt
# 4. Place the propeller_cc_profile.txt and propeller_ld_profile.txt into the srcdir
# 5. Enable _propeller_prefix
: "${_propeller:=no}"

# Enable this after the profiles have been generated
: "${_propeller_profiles:=no}"

### Build process optimizations
# Parallel build jobs (defaults to nproc)
: "${_build_jobs:=$(nproc)}"
# Parallel linking jobs (defaults to nproc/2 to avoid OOM)
: "${_link_jobs:=$(($(nproc) / 2))}"
# Enhanced build flags
: "${_enhanced_build_flags:=yes}"

### Security vs Performance balance
# 'security' - prioritize security features
# 'performance' - prioritize performance over some security features
# 'balanced' - balanced approach
: "${_security_performance_balance:=balanced}"

### Workload-specific optimizations
# 'desktop' - optimized for desktop usage
# 'server' - optimized for server workloads  
# 'gaming' - optimized for gaming
# 'development' - optimized for development/compilation
# 'generic' - balanced for all workloads
: "${_workload_profile:=desktop}"

### Power management optimizations
# Enable advanced power management
: "${_enable_advanced_pm:=yes}"
# Enable Intel P-State enhancements
: "${_intel_pstate_enhanced:=yes}"
# Enable AMD P-State enhancements  
: "${_amd_pstate_enhanced:=yes}"

# ATTENTION: Do not modify after this line
_is_lto_kernel() {
    [[ "$_use_llvm_lto" = "thin" || "$_use_llvm_lto" = "full"  || "$_use_llvm_lto" = "thin-dist" ]]
    return $?
}

if _is_lto_kernel && [ "$_use_lto_suffix" = "yes"  ]; then
    _pkgsuffix=cachyos-lto
elif ! _is_lto_kernel && [ "$_use_gcc_suffix" = "yes" ]; then
    _pkgsuffix=cachyos-gcc
else
    _pkgsuffix=cachyos
fi

# Add performance suffix if ultra optimizations enabled
if [ "$_cc_ultra" = "yes" ]; then
    _pkgsuffix="${_pkgsuffix}-ultra"
fi

pkgbase="linux-$_pkgsuffix"
_major=6.16
_minor=4
#_minorc=$((_minor+1))
#_rcver=rc8
pkgver=${_major}.${_minor}
_stable=${_major}.${_minor}
#_stable=${_major}
#_stablerc=${_major}-${_rcver}
_srcname=linux-${_stable}
#_srcname=linux-${_major}
pkgdesc='Linux BORE + LTO + AutoFDO + Propeller + Enhanced Performance Optimizations Cachy Sauce Kernel by CachyOS with other patches and improvements.'
pkgrel=2
_kernver="$pkgver-$pkgrel"
_kernuname="${pkgver}-${_pkgsuffix}"
arch=('x86_64')
url="https://github.com/CachyOS/linux-cachyos"
license=('GPL-2.0-only')
options=('!strip' '!debug' '!lto')
makedepends=(
  bc
  cpio
  gettext
  libelf
  pahole
  perl
  python
  rust
  rust-bindgen
  rust-src
  tar
  xz
  zstd
)

_patchsource="https://raw.githubusercontent.com/cachyos/kernel-patches/master/${_major}"
_nv_ver=580.82.07
_nv_pkg="NVIDIA-Linux-x86_64-${_nv_ver}"
_nv_open_pkg="NVIDIA-kernel-module-source-${_nv_ver}"
source=(
    "https://cdn.kernel.org/pub/linux/kernel/v${pkgver%%.*}.x/${_srcname}.tar.xz"
    "config"
    "${_patchsource}/all/0001-cachyos-base-all.patch")

# LLVM makedepends
if _is_lto_kernel; then
    makedepends+=(clang llvm lld)
    source+=("${_patchsource}/misc/dkms-clang.patch")
    BUILD_FLAGS=(
        CC=clang
        LD=ld.lld
        LLVM=1
        LLVM_IAS=1
    )
fi

# Enhanced build flags
if [ "$_enhanced_build_flags" = "yes" ]; then
    if _is_lto_kernel; then
        BUILD_FLAGS+=(
            KCFLAGS="-march=native -mtune=native"
            KCPPFLAGS="-march=native -mtune=native"
        )
    else
        BUILD_FLAGS+=(
            CFLAGS_KERNEL="-march=native -mtune=native -O3"
            CFLAGS_MODULE="-march=native -mtune=native -O3"
        )
    fi
fi

# Enhanced linking for LTO
if [ "$_enhanced_linking" = "yes" ] && _is_lto_kernel; then
    BUILD_FLAGS+=(
        LDFLAGS_vmlinux="--threads=$_link_jobs"
    )
fi

# WARNING The ZFS module doesn't build with selected RT sched due to licensing issues.
if [[ "$_cpusched" = "rt" || "$_cpusched" = "rt-bore" ]]; then
    unset _build_zfs
fi

# ZFS support
if [ "$_build_zfs" = "yes" ]; then
    makedepends+=(git)
    source+=("git+https://github.com/cachyos/zfs.git#commit=34f96a15c73eab27dd6ad17bb5f1263bf26e37d7")
fi

# NVIDIA pre-build module support
if [ "$_build_nvidia" = "yes" ]; then
    source+=("https://us.download.nvidia.com/XFree86/Linux-x86_64/${_nv_ver}/${_nv_pkg}.run"
             "${_patchsource}/misc/nvidia/0001-Enable-atomic-kernel-modesetting-by-default.patch")
fi

if [ "$_build_nvidia_open" = "yes" ]; then
    source+=("https://download.nvidia.com/XFree86/${_nv_open_pkg%"-$_nv_ver"}/${_nv_open_pkg}.tar.xz"
             "${_patchsource}/misc/nvidia/0001-Enable-atomic-kernel-modesetting-by-default.patch"
             "${_patchsource}/misc/nvidia/0002-Add-IBT-support.patch")
fi

# Use generated AutoFDO Profile
if [ "$_autofdo" = "yes" ] && [ -n "$_autofdo_profile_name" ]; then
    if [ -e "$_autofdo_profile_name" ]; then
        source+=("$_autofdo_profile_name")
    else
        _die "Failed to find file ${_autofdo_profile_name}"
    fi
fi

# Use generated Propeller Profile
if [ "$_propeller" = "yes" ] && [ "$_propeller_profiles" = "yes" ]; then
    source+=(propeller_cc_profile.txt
             propeller_ld_profile.txt)
fi

## List of CachyOS schedulers
case "$_cpusched" in
    cachyos|bore|rt-bore|hardened) # CachyOS Scheduler (BORE)
        source+=("${_patchsource}/sched/0001-bore-cachy.patch");;&
    bmq) ## Project C Scheduler
        source+=("${_patchsource}/sched/0001-prjc-cachy.patch");;
    hardened) ## Hardened Patches
        source+=("${_patchsource}/misc/0001-hardened.patch");;
    rt|rt-bore) ## RT patches
        source+=("${_patchsource}/misc/0001-rt-i915.patch");;
    scx) ## sched-ext framework
        source+=("${_patchsource}/sched/0001-sched-ext.patch");;
esac

# Enhanced patches
if [ "$_enable_fsync" = "yes" ]; then
    source+=("${_patchsource}/misc/0001-fsync.patch")
fi

if [ "$_enable_futex2" = "yes" ]; then
    source+=("${_patchsource}/misc/0001-futex2.patch")  
fi

if [ "$_gaming_optimizations" = "yes" ]; then
    source+=("${_patchsource}/misc/0001-gaming-optimizations.patch")
fi

if [ "$_enable_xdp_opt" = "yes" ]; then
    source+=("${_patchsource}/misc/0001-xdp-optimizations.patch")
fi

export KBUILD_BUILD_HOST=cachyos
export KBUILD_BUILD_USER="$pkgbase"
export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

_die() { error "$@" ; exit 1; }

prepare() {
    cd "$_srcname"

    echo "Setting version..."
    echo "-$pkgrel" > localversion.10-pkgrel
    echo "${pkgbase#linux}" > localversion.20-pkgname

    local src
    for src in "${source[@]}"; do
        src="${src%%::*}"
        # Skip nvidia patches
        [[ "$src" == "${_patchsource}"/misc/nvidia/*.patch ]] && continue
        src="${src##*/}"
        src="${src%.zst}"
        [[ $src = *.patch ]] || continue
        echo "Applying patch $src..."
        patch -Np1 < "../$src"
    done

    echo "Setting config..."
    cp ../config .config

    ### Select CPU optimization
    if [ -n "$_processor_opt" ]; then
        MARCH="${_processor_opt^^}"

        case "$MARCH" in
            GENERIC_V[1-4]) scripts/config -e GENERIC_CPU -d MZEN4 -d MZEN3 -d MZEN2 -d X86_NATIVE_CPU \
                --set-val X86_64_VERSION "${MARCH//GENERIC_V}";;
            ZEN4) scripts/config -d GENERIC_CPU -e MZEN4 -d MZEN3 -d MZEN2 -d X86_NATIVE_CPU;;
            ZEN3) scripts/config -d GENERIC_CPU -d MZEN4 -e MZEN3 -d MZEN2 -d X86_NATIVE_CPU;;
            ZEN2) scripts/config -d GENERIC_CPU -d MZEN4 -d MZEN3 -e MZEN2 -d X86_NATIVE_CPU;;
            ALDERLAKE) scripts/config -d GENERIC_CPU -d MZEN4 -d MZEN3 -d MZEN2 -e MALDERLAKE -d X86_NATIVE_CPU;;
            SAPPHIRERAPIDS) scripts/config -d GENERIC_CPU -d MZEN4 -d MZEN3 -d MZEN2 -d MALDERLAKE -e MSAPPHIRERAPIDS -d X86_NATIVE_CPU;;
            NATIVE) scripts/config -d GENERIC_CPU -d MZEN4 -d MZEN3 -d MZEN2 -d MALDERLAKE -d MSAPPHIRERAPIDS -e X86_NATIVE_CPU;;
        esac
    else
        scripts/config -d GENERIC_CPU -d MZEN4 -d MZEN3 -d MZEN2 -d MALDERLAKE -d MSAPPHIRERAPIDS -e X86_NATIVE_CPU
    fi

    ### Enhanced CPU optimizations
    if [ "$_enable_advanced_isa" = "yes" ]; then
        echo "Enabling advanced instruction sets..."
        scripts/config -e X86_CMPXCHG64 -e X86_CMOV -e X86_CMPXCHG -e X86_TSC -e X86_WP_WORKS_OK \
            -e X86_INVD_BUG -e X86_ALIGNMENT_16 -e X86_INTEL_USERCOPY -e X86_USE_PPRO_CHECKSUM
    fi

    ### Selecting CachyOS config
    if [ "$_cachy_config" = "yes" ]; then
        echo "Enabling CachyOS config..."
        scripts/config -e CACHY
    fi

    ### Selecting the CPU scheduler
    case "$_cpusched" in
        cachyos|bore|hardened) scripts/config -e SCHED_BORE;;
        bmq) scripts/config -e SCHED_ALT -e SCHED_BMQ;;
        eevdf) ;;
        rt) scripts/config -e PREEMPT_RT;;
        rt-bore) scripts/config -e SCHED_BORE -e PREEMPT_RT;;
        scx) scripts/config -e SCHED_CLASS_EXT;;
        *) _die "The value $_cpusched is invalid. Choose the correct one again.";;
    esac

    echo "Selecting ${_cpusched^^} CPU scheduler..."

    ### BORE scheduler tuning
    if [[ "$_cpusched" == *"bore"* ]] && [ "$_bore_tuning" != "balanced" ]; then
        case "$_bore_tuning" in
            performance)
                echo "Applying BORE performance tuning..."
                # Performance-focused BORE settings would go here
                ;;
            responsive)
                echo "Applying BORE responsive tuning..."
                # Responsiveness-focused BORE settings would go here
                ;;
            gaming)
                echo "Applying BORE gaming tuning..."
                # Gaming-focused BORE settings would go here
                ;;
        esac
    fi

    ### Enhanced preemption
    if [ "$_preempt_enhanced" = "yes" ]; then
        echo "Enabling enhanced preemption features..."
        scripts/config -e PREEMPT_RCU -e RCU_EXPERT -e RCU_FANOUT_EXACT --set-val RCU_FANOUT 64
    fi

    ### Enable KCFI
    if [ "$_use_kcfi" = "yes" ]; then
        echo "Enabling kCFI"
        scripts/config -e ARCH_SUPPORTS_CFI_CLANG -e CFI_CLANG -e CFI_AUTO_DEFAULT
    fi

    ### Select LLVM level
    case "$_use_llvm_lto" in
        thin) scripts/config -e LTO_CLANG_THIN;;
        thin-dist) scripts/config -e LTO_CLANG_THIN_DIST;;
        full) scripts/config -e LTO_CLANG_FULL;;
        none) scripts/config -e LTO_NONE;;
        *) _die "The value '$_use_llvm_lto' is invalid. Choose the correct one again.";;
    esac

    echo "Selecting '$_use_llvm_lto' LLVM level..."

    if ! _is_lto_kernel; then
        echo "Enabling QR Code Panic for GCC Kernels"
        scripts/config --set-str DRM_PANIC_SCREEN qr_code -e DRM_PANIC_SCREEN_QR_CODE \
            --set-str DRM_PANIC_SCREEN_QR_CODE_URL https://panic.archlinux.org/panic_report# \
            --set-val CONFIG_DRM_PANIC_SCREEN_QR_VERSION 40
    fi

    ### Select tick rate
    case "$_HZ_ticks" in
        100|250|500|600|750|1000)
            scripts/config -d HZ_300 -e "HZ_${_HZ_ticks}" --set-val HZ "${_HZ_ticks}";;
        300)
            scripts/config -e HZ_300 --set-val HZ 300;;
        *)
            _die "The value $_HZ_ticks is invalid. Choose the correct one again."
    esac

    echo "Setting tick rate to ${_HZ_ticks}Hz..."

    ### Select performance governor
    if [ "$_per_gov" = "yes" ]; then
        echo "Setting performance governor..."
        scripts/config -d CPU_FREQ_DEFAULT_GOV_SCHEDUTIL \
            -e CPU_FREQ_DEFAULT_GOV_PERFORMANCE
    fi

    ### Enhanced power management
    if [ "$_enable_advanced_pm" = "yes" ]; then
        echo "Enabling advanced power management..."
        scripts/config -e CPU_FREQ -e CPU_FREQ_STAT -e CPU_FREQ_TIMES -e CPU_FREQ_GOV_ATTR_SET \
            -e ENERGY_MODEL -e PM_ADVANCED_DEBUG -e PM_SLEEP_DEBUG
    fi

    if [ "$_intel_pstate_enhanced" = "yes" ]; then
        echo "Enabling Intel P-State enhancements..."
        scripts/config -e X86_INTEL_PSTATE -e X86_ACPI_CPUFREQ -e X86_POWERNOW_K8
    fi

    if [ "$_amd_pstate_enhanced" = "yes" ]; then
        echo "Enabling AMD P-State enhancements..."
        scripts/config -e X86_AMD_PSTATE -e X86_AMD_PSTATE_UT
    fi

    ### Select tick type
    case "$_tickrate" in
        perodic) scripts/config -d NO_HZ_IDLE -d NO_HZ_FULL -d NO_HZ -d NO_HZ_COMMON -e HZ_PERIODIC;;
        idle) scripts/config -d HZ_PERIODIC -d NO_HZ_FULL -e NO_HZ_IDLE  -e NO_HZ -e NO_HZ_COMMON;;
        full) scripts/config -d HZ_PERIODIC -d NO_HZ_IDLE -d CONTEXT_TRACKING_FORCE -e NO_HZ_FULL_NODEF -e NO_HZ_FULL -e NO_HZ -e NO_HZ_COMMON -e CONTEXT_TRACKING;;
        *) _die "The value '$_tickrate' is invalid. Choose the correct one again.";;
    esac

    echo "Selecting '$_tickrate' tick type..."

    ### Select preempt type
    # We should not set up the PREEMPT for RT kernels
    if [[ "$_cpusched" != "rt" && "$_cpusched" != "rt-bore" ]]; then
        case "$_preempt" in
            full) scripts/config -e PREEMPT_DYNAMIC -e PREEMPT -d PREEMPT_VOLUNTARY -d PREEMPT_LAZY -d PREEMPT_NONE;;
            lazy) scripts/config -e PREEMPT_DYNAMIC -d PREEMPT -d PREEMPT_VOLUNTARY -e PREEMPT_LAZY -d PREEMPT_NONE;;
            voluntary) scripts/config -d PREEMPT_DYNAMIC -d PREEMPT -e PREEMPT_VOLUNTARY -d PREEMPT_LAZY -d PREEMPT_NONE;;
            none) scripts/config -d PREEMPT_DYNAMIC -d PREEMPT -d PREEMPT_VOLUNTARY -d PREEMPT_LAZY -e PREEMPT_NONE;;
            *) _die "The value '$_preempt' is invalid. Choose the correct one again.";;
        esac

        echo "Selecting '$_preempt' preempt type..."
    fi

    ### Enable O3
    if [ "$_cc_harder" = "yes" ]; then
        echo "Enabling KBUILD_CFLAGS -O3..."
        scripts/config -d CC_OPTIMIZE_FOR_PERFORMANCE \
            -e CC_OPTIMIZE_FOR_PERFORMANCE_O3
    fi

    ### Enable ultra compiler optimizations
    if [ "$_cc_ultra" = "yes" ]; then
        echo "Enabling ultra compiler optimizations..."
        scripts/config -d CC_OPTIMIZE_FOR_PERFORMANCE \
            -d CC_OPTIMIZE_FOR_PERFORMANCE_O3 \
            -e CC_OPTIMIZE_FOR_PERFORMANCE_O3
        # Enable additional aggressive optimizations
        if _is_lto_kernel; then
            BUILD_FLAGS+=(KCFLAGS="-O3 -march=native -mtune=native -flto=thin -ffunction-sections -fdata-sections")
        fi
    fi

    ### Enable Graphite optimizations (GCC only)
    if [ "$_enable_graphite" = "yes" ] && ! _is_lto_kernel; then
        echo "Enabling Graphite optimizations..."
        BUILD_FLAGS+=(KCFLAGS="-fgraphite-identity -floop-nest-optimize -fdevirtualize-at-ltrans")
    fi

    ### CI-only stuff
    if [[ -n "$CI" || -n "$GITHUB_RUN_ID" ]]; then
        echo "Detected build inside CI"
        scripts/config -d CC_OPTIMIZE_FOR_PERFORMANCE \
            -d CC_OPTIMIZE_FOR_PERFORMANCE_O3 \
            -e CONFIG_CC_OPTIMIZE_FOR_SIZE \
            -d SLUB_DEBUG \
            -d PM_DEBUG \
            -d PM_ADVANCED_DEBUG \
            -d PM_SLEEP_DEBUG \
            -d ACPI_DEBUG \
            -d LATENCYTOP \
            -d SCHED_DEBUG \
            -d DEBUG_PREEMPT
    fi

    ### Enhanced memory management
    if [ "$_enable_mglru" = "yes" ]; then
        echo "Enabling Multi-Gen LRU..."
        scripts/config -e LRU_GEN -e LRU_GEN_ENABLED -d LRU_GEN_STATS
    fi

    if [ "$_memory_compaction" = "yes" ]; then
        echo "Enabling advanced memory compaction..."
        scripts/config -e COMPACTION -e MIGRATION -e BALLOON_COMPACTION \
            -e COMPACTION_PROACTIVE -e COMPACTION_SYSFS
    fi

    if [ "$_enable_zram_opt" = "yes" ]; then
        echo "Enabling ZRAM optimizations..."
        scripts/config -e ZRAM -e ZRAM_DEF_COMP_LZ4 -e ZSMALLOC -e ZSMALLOC_STAT
        case "$_zram_algorithm" in
            lz4) scripts/config -e ZRAM_DEF_COMP_LZ4;;
            lzo) scripts/config -e ZRAM_DEF_COMP_LZO;;
            zstd) scripts/config -e ZRAM_DEF_COMP_ZSTD;;
        esac
    fi

    ### I/O and storage optimizations
    if [ "$_block_layer_opt" = "yes" ]; then
        echo "Enabling block layer optimizations..."
        scripts/config -e BLK_DEV_THROTTLING -e BLK_WBT -e BLK_WBT_MQ \
            -e BLK_DEV_INTEGRITY -e BLK_SED_OPAL -e BLK_INLINE_ENCRYPTION
    fi

    if [ "$_enable_io_uring_opt" = "yes" ]; then
        echo "Enabling io_uring optimizations..."
        scripts/config -e IO_URING -e IO_WQ -e IO_URING_SCM
    fi

    ### Set default I/O scheduler
    case "$_io_scheduler" in
        mq-deadline)
            scripts/config -e IOSCHED_DEADLINE -e MQ_IOSCHED_DEADLINE \
                -d IOSCHED_KYBER -d MQ_IOSCHED_KYBER \
                --set-str DEFAULT_IOSCHED mq-deadline;;
        kyber)
            scripts/config -d IOSCHED_DEADLINE -d MQ_IOSCHED_DEADLINE \
                -e IOSCHED_KYBER -e MQ_IOSCHED_KYBER \
                --set-str DEFAULT_IOSCHED kyber;;
        bfq)
            scripts/config -e IOSCHED_BFQ -e BFQ_GROUP_IOSCHED \
                --set-str DEFAULT_IOSCHED bfq;;
        none)
            scripts/config -d IOSCHED_DEADLINE -d MQ_IOSCHED_DEADLINE \
                -d IOSCHED_KYBER -d MQ_IOSCHED_KYBER -d IOSCHED_BFQ \
                --set-str DEFAULT_IOSCHED none;;
    esac

    ### Gaming optimizations
    if [ "$_enable_fsync" = "yes" ]; then
        echo "Enabling FSYNC optimizations..."
        scripts/config -e FUTEX -e FUTEX_PI
    fi

    if [ "$_enable_futex2" = "yes" ]; then
        echo "Enabling FUTEX2 support..."
        # FUTEX2 configuration would go here when available
    fi

    if [ "$_gaming_optimizations" = "yes" ]; then
        echo "Enabling gaming optimizations..."
        # Optimize for gaming workloads
        scripts/config -e HIGH_RES_TIMERS -e NO_HZ_FULL \
            -e PREEMPT_DYNAMIC -e CPU_FREQ_GOV_PERFORMANCE
    fi

    if [ "$_enable_amdgpu_ctx_priority" = "yes" ]; then
        echo "Enabling AMD GPU context priority..."
        scripts/config -e DRM_AMD_DC_DCN -e DRM_AMD_DC_HDCP
    fi

    ### Enhanced network optimizations
    if [ "$_tcp_advanced" = "yes" ]; then
        echo "Enabling advanced TCP features..."
        scripts/config -e TCP_CONG_ADVANCED -e TCP_MD5SIG -e TCP_AO \
            -e INET_TCP_DIAG -e INET_UDP_DIAG -e INET_RAW_DIAG
    fi

    if [ "$_enable_xdp_opt" = "yes" ]; then
        echo "Enabling XDP optimizations..."
        scripts/config -e XDP_SOCKETS -e XDP_SOCKETS_DIAG -e BPF_STREAM_PARSER \
            -e NET_CLS_BPF -e NET_ACT_BPF -e BPF_JIT -e HAVE_EBPF_JIT
    fi

    ### Enable bbr3
    if [ "$_tcp_bbr3" = "yes" ]; then
        echo "Disabling TCP_CONG_CUBIC..."
        scripts/config -m TCP_CONG_CUBIC \
            -d DEFAULT_CUBIC \
            -e TCP_CONG_BBR \
            -e DEFAULT_BBR \
            --set-str DEFAULT_TCP_CONG bbr \
            -m NET_SCH_FQ_CODEL \
            -e NET_SCH_FQ \
            -d CONFIG_DEFAULT_FQ_CODEL \
            -e CONFIG_DEFAULT_FQ
    fi

    ### Select THP
    case "$_hugepage" in
        always) scripts/config -d TRANSPARENT_HUGEPAGE_MADVISE -e TRANSPARENT_HUGEPAGE_ALWAYS;;
        madvise) scripts/config -d TRANSPARENT_HUGEPAGE_ALWAYS -e TRANSPARENT_HUGEPAGE_MADVISE;;
        *) _die "The value '$_hugepage' is invalid. Choose the correct one again.";;
    esac

    echo "Selecting '$_hugepage' TRANSPARENT_HUGEPAGE config..."

    ### Security vs Performance balance
    case "$_security_performance_balance" in
        security)
            echo "Prioritizing security features..."
            scripts/config -e SECURITY -e SECURITY_SELINUX -e SECURITY_APPARMOR \
                -e HARDENED_USERCOPY -e FORTIFY_SOURCE -e STACKPROTECTOR_STRONG \
                -e SLAB_FREELIST_RANDOM -e SLAB_FREELIST_HARDENED;;
        performance)
            echo "Prioritizing performance over security..."
            scripts/config -d SECURITY_SELINUX -d SECURITY_APPARMOR \
                -d HARDENED_USERCOPY -d FORTIFY_SOURCE -d STACKPROTECTOR_STRONG \
                -d SLAB_FREELIST_RANDOM -d SLAB_FREELIST_HARDENED;;
        balanced)
            echo "Using balanced security/performance approach..."
            scripts/config -e SECURITY -d SECURITY_SELINUX -e SECURITY_APPARMOR \
                -e HARDENED_USERCOPY -e FORTIFY_SOURCE -d STACKPROTECTOR_STRONG;;
    esac

    ### Workload-specific optimizations
    case "$_workload_profile" in
        desktop)
            echo "Optimizing for desktop workloads..."
            scripts/config -e PREEMPT_DYNAMIC -e NO_HZ_IDLE \
                -e CPU_FREQ_GOV_SCHEDUTIL -e ENERGY_MODEL;;
        server)
            echo "Optimizing for server workloads..."
            scripts/config -e PREEMPT_VOLUNTARY -e NO_HZ_IDLE \
                -e CPU_FREQ_GOV_PERFORMANCE -d ENERGY_MODEL;;
        gaming)
            echo "Optimizing for gaming workloads..."
            scripts/config -e PREEMPT_DYNAMIC -e NO_HZ_FULL \
                -e CPU_FREQ_GOV_PERFORMANCE -e HIGH_RES_TIMERS;;
        development)
            echo "Optimizing for development workloads..."
            scripts/config -e PREEMPT_DYNAMIC -e NO_HZ_IDLE \
                -e CPU_FREQ_GOV_PERFORMANCE -e SCHED_BORE;;
        generic)
            echo "Using generic balanced optimizations...";;
    esac

    # Enable Clang AutoFDO
    # Add additonal check if Thin or Full LTO is enabled otherwise die
    if [ "$_autofdo" = "yes" ]; then
        scripts/config -e AUTOFDO_CLANG
    fi

    if [ "$_autofdo" = "yes" ] && [ -n "$_autofdo_profile_name" ]; then
        echo "AutoFDO profile has been found..."
        BUILD_FLAGS+=(CLANG_AUTOFDO_PROFILE="${srcdir}/${_autofdo_profile_name}")
    fi

    # Propeller Optimization
    if [ "$_propeller" = "yes" ]; then
        scripts/config -e PROPELLER_CLANG
    fi

    if [ "$_propeller" = "yes" ] && [ "$_propeller_profiles" = "yes" ]; then
        echo "Propeller profile has been found..."
        BUILD_FLAGS+=(CLANG_PROPELLER_PROFILE_PREFIX="${srcdir}/propeller")
    fi

    ### Enhanced kernel features
    echo "Enable USER_NS_UNPRIVILEGED"
    scripts/config -e USER_NS

    # Enable advanced CPU features
    echo "Enabling advanced CPU features..."
    scripts/config -e X86_INTEL_PSTATE -e CPU_FREQ_GOV_SCHEDUTIL -e ENERGY_MODEL

    # Memory management improvements  
    echo "Enabling memory management improvements..."
    scripts/config -e TRANSPARENT_HUGEPAGE -e COMPACTION -e MIGRATION \
        -e BALLOON_COMPACTION -e MEMORY_HOTPLUG -e MEMORY_HOTREMOVE

    # Enable advanced RCU features
    echo "Enabling advanced RCU features..."
    scripts/config -e PREEMPT_RCU -e RCU_EXPERT -e RCU_FANOUT_EXACT \
        --set-val RCU_FANOUT 64 -e RCU_FAST_NO_HZ

    # File system optimizations
    echo "Enabling file system optimizations..."
    scripts/config -e EXT4_FS -e EXT4_USE_FOR_EXT2 -e EXT4_FS_POSIX_ACL \
        -e EXT4_FS_SECURITY -e BTRFS_FS -e BTRFS_FS_POSIX_ACL \
        -e XFS_FS -e XFS_QUOTA -e XFS_POSIX_ACL -e F2FS_FS

    # Network performance enhancements
    echo "Enabling network performance enhancements..."
    scripts/config -e NET_SCHED -e NET_SCH_FQ -e NET_SCH_FQ_CODEL \
        -e NET_SCH_BBR -e TCP_CONG_BBR -e NETFILTER_NETLINK_ACCT

    ### Optionally use running kernel's config
    # code originally by nous; http://aur.archlinux.org/packages.php?ID=40191
    if [ "$_use_current" = "yes" ]; then
        if [[ -s /proc/config.gz ]]; then
            echo "Extracting config from /proc/config.gz..."
            # modprobe configs
            zcat /proc/config.gz > ./.config
        else
            warning "Your kernel was not compiled with IKPROC!"
            warning "You cannot read the current config!"
            warning "Aborting!"
            exit
        fi
    fi

    ### Optionally load needed modules for the make localmodconfig
    # See https://aur.archlinux.org/packages/modprobed-db
    if [ "$_localmodcfg" = "yes" ]; then
        if [ -e "$_localmodcfg_path" ]; then
            echo "Running Steven Rostedt's make localmodconfig now"
            make "${BUILD_FLAGS[@]}" LSMOD="${_localmodcfg_path}" localmodconfig
        else
            _die "No modprobed.db data found"
        fi
    fi

    ### Rewrite configuration
    echo "Rewrite configuration..."
    make "${BUILD_FLAGS[@]}" prepare
    yes "" | make "${BUILD_FLAGS[@]}" config >/dev/null
    diff -u ../config .config || :

    ### Prepared version
    make -s kernelrelease > version
    echo "Prepared $pkgbase version $(<version)"

    ### Running make nconfig
    [ "$_makenconfig" = "yes" ] && make "${BUILD_FLAGS[@]}" nconfig

    ### Running make xconfig
    [ "$_makexconfig" = "yes" ] &&  make "${BUILD_FLAGS[@]}" xconfig

    ### Save configuration for later reuse
    echo "Save configuration for later reuse..."
    local basedir="$(dirname "$(readlink "${srcdir}/config")")"
    cat .config > "${basedir}/config-${pkgver}-${pkgrel}${pkgbase#linux}"

    if [ "$_build_nvidia" = "yes" ]; then
        cd "${srcdir}"
        sh "${_nv_pkg}.run" --extract-only

        # Use fbdev and modeset as default
        patch -Np1 -i "${srcdir}/0001-Enable-atomic-kernel-modesetting-by-default.patch" -d "${srcdir}/${_nv_pkg}/kernel"
    fi

    if [ "$_build_nvidia_open" = "yes" ]; then
        patch -Np1 -i "${srcdir}/0001-Enable-atomic-kernel-modesetting-by-default.patch" -d "${srcdir}/${_nv_open_pkg}/kernel-open"
        patch -Np1 -i "${srcdir}/0002-Add-IBT-support.patch" -d "${srcdir}/${_nv_open_pkg}/"
    fi
}

_sign_modules() {
    msg2 "Signing modules in $1"
    local sign_script="${srcdir}/${_srcname}/scripts/sign-file"
    local sign_key="$(grep -Po 'CONFIG_MODULE_SIG_KEY="\K[^"]*' "${srcdir}/${_srcname}/.config")"
    if [[ ! "$sign_key" =~ ^/ ]]; then
        sign_key="${srcdir}/${_srcname}/${sign_key}"
    fi
    local sign_cert="${srcdir}/${_srcname}/certs/signing_key.x509"
    local hash_algo="$(grep -Po 'CONFIG_MODULE_SIG_HASH="\K[^"]*' "${srcdir}/${_srcname}/.config")"

    find "$1" -type f -name '*.ko' -print -exec \
        "${sign_script}" "${hash_algo}" "${sign_key}" "${sign_cert}" '{}' \;
}

build() {
    cd "$_srcname"
    
    # Enhanced build with parallel jobs
    echo "Building kernel with ${_build_jobs} jobs..."
    make "${BUILD_FLAGS[@]}" -j"${_build_jobs}" all
    make -C tools/bpf/bpftool vmlinux.h feature-clang-bpf-co-re=1

    local MODULE_FLAGS=(
       KERNEL_UNAME="${_kernuname}"
       IGNORE_PREEMPT_RT_PRESENCE=1
       SYSSRC="${srcdir}/${_srcname}"
       SYSOUT="${srcdir}/${_srcname}"
    )
    
    if [ "$_build_nvidia" = "yes" ]; then
        MODULE_FLAGS+=(NV_EXCLUDE_BUILD_MODULES='__EXCLUDE_MODULES')
        cd "${srcdir}/${_nv_pkg}/kernel"
        make "${BUILD_FLAGS[@]}" "${MODULE_FLAGS[@]}" -j"${_build_jobs}" modules
    fi

    if [ "$_build_nvidia_open" = "yes" ]; then
        cd "${srcdir}/${_nv_open_pkg}"
        MODULE_FLAGS+=(IGNORE_CC_MISMATCH=yes)
        CFLAGS= CXXFLAGS= LDFLAGS= make "${BUILD_FLAGS[@]}" "${MODULE_FLAGS[@]}" -j"${_build_jobs}" modules
    fi

    if [ "$_build_zfs" = "yes" ]; then
        cd ${srcdir}/"zfs"

        local CONFIGURE_FLAGS=()
        [ "$_use_llvm_lto" != "none" ] && CONFIGURE_FLAGS+=("KERNEL_LLVM=1")

        ./autogen.sh
        sed -i "s|\$(uname -r)|${_kernuname}|g" configure
        ./configure "${CONFIGURE_FLAGS[@]}" --prefix=/usr --sysconfdir=/etc --sbindir=/usr/bin \
            --libdir=/usr/lib --datadir=/usr/share --includedir=/usr/include \
            --with-udevdir=/lib/udev --libexecdir=/usr/lib/zfs --with-config=kernel \
            --with-linux="${srcdir}/$_srcname"
        make "${BUILD_FLAGS[@]}"
    fi
}

_generate_tuning_script() {
    echo "Generating performance tuning script..."
    cat > "$pkgdir/usr/bin/cachyos-performance-tune" << 'EOF'
#!/bin/bash
# CachyOS Enhanced Performance Tuning Script
# This script applies runtime optimizations for the CachyOS kernel

set -e

echo "CachyOS Performance Tuning Script"
echo "=================================="

# Check if running as root
if [[ $EUID -ne 0 ]]; then
    echo "This script must be run as root" 
    exit 1
fi

# CPU Governor optimization
echo "Setting CPU governor to performance..."
for cpu in /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor; do
    [ -w "$cpu" ] && echo performance > "$cpu"
done

# Transparent Hugepage optimization
echo "Optimizing Transparent Hugepages..."
if [ -w /sys/kernel/mm/transparent_hugepage/enabled ]; then
    echo always > /sys/kernel/mm/transparent_hugepage/enabled
fi
if [ -w /sys/kernel/mm/transparent_hugepage/defrag ]; then
    echo madvise > /sys/kernel/mm/transparent_hugepage/defrag
fi

# Memory management optimization
echo "Optimizing memory management..."
sysctl -w vm.swappiness=10
sysctl -w vm.dirty_ratio=15
sysctl -w vm.dirty_background_ratio=5
sysctl -w vm.vfs_cache_pressure=50
sysctl -w vm.min_free_kbytes=65536

# I/O optimization
echo "Optimizing I/O schedulers..."
for disk in /sys/block/sd* /sys/block/nvme*; do
    if [ -d "$disk" ]; then
        scheduler_file="$disk/queue/scheduler"
        if [ -w "$scheduler_file" ]; then
            # Set mq-deadline for SATA, none for NVMe
            if [[ "$disk" == *nvme* ]]; then
                echo none > "$scheduler_file" 2>/dev/null || echo kyber > "$scheduler_file"
            else
                echo mq-deadline > "$scheduler_file"
            fi
        fi
        
        # Set read-ahead
        read_ahead="$disk/queue/read_ahead_kb"
        [ -w "$read_ahead" ] && echo 128 > "$read_ahead"
        
        # Set queue depth
        nr_requests="$disk/queue/nr_requests"
        [ -w "$nr_requests" ] && echo 256 > "$nr_requests"
    fi
done

# Network optimization
echo "Optimizing network settings..."
sysctl -w net.core.rmem_max=16777216
sysctl -w net.core.wmem_max=16777216
sysctl -w net.ipv4.tcp_rmem="4096 16384 16777216"
sysctl -w net.ipv4.tcp_wmem="4096 16384 16777216"
sysctl -w net.core.netdev_max_backlog=5000
sysctl -w net.ipv4.tcp_congestion_control=bbr

# Gaming optimizations (if detected)
if command -v steam >/dev/null 2>&1 || command -v lutris >/dev/null 2>&1; then
    echo "Applying gaming optimizations..."
    sysctl -w kernel.sched_child_runs_first=0
    sysctl -w kernel.sched_autogroup_enabled=1
    
    # Set CPU scaling min frequency higher for gaming
    for cpu in /sys/devices/system/cpu/cpu*/cpufreq/scaling_min_freq; do
        if [ -w "$cpu" ]; then
            max_freq=$(cat "${cpu%/*}/scaling_max_freq")
            min_freq=$((max_freq * 60 / 100))  # 60% of max frequency
            echo "$min_freq" > "$cpu" 2>/dev/null || true
        fi
    done
fi

# Enable Multi-Gen LRU if available
if [ -w /sys/kernel/mm/lru_gen/enabled ]; then
    echo "Enabling Multi-Gen LRU..."
    echo 1 > /sys/kernel/mm/lru_gen/enabled
fi

# Optimize for SSD if detected
echo "Detecting and optimizing storage devices..."
for disk in $(lsblk -d -n -o NAME,ROTA | awk '$2==0 {print $1}'); do
    if [ -w "/sys/block/$disk/queue/scheduler" ]; then
        echo "Optimizing SSD: $disk"
        echo none > "/sys/block/$disk/queue/scheduler" 2>/dev/null || echo kyber > "/sys/block/$disk/queue/scheduler"
    fi
done

echo "Performance tuning completed!"
echo "You may want to reboot to ensure all optimizations are applied."
EOF

    chmod +x "$pkgdir/usr/bin/cachyos-performance-tune"
}

_package() {
    pkgdesc="The $pkgdesc kernel and modules"
    depends=('coreutils' 'kmod' 'initramfs')
    optdepends=('wireless-regdb: to set the correct wireless channels of your country'
                'linux-firmware: firmware images needed for some devices'
                'modprobed-db: Keeps track of EVERY kernel module that has ever been probed - useful for those of us who make localmodconfig'
                'scx-scheds: to use sched-ext schedulers')
    provides=(VIRTUALBOX-GUEST-MODULES WIREGUARD-MODULE KSMBD-MODULE V4L2LOOPBACK-MODULE NTSYNC-MODULE VHBA-MODULE ADIOS-MODULE)
    
    # Replace LTO kernel with the default kernel
    if _is_lto_kernel; then
        provides+=(linux-cachyos-lto=$_kernver)
        replaces=(linux-cachyos-lto)
    fi

    cd "$_srcname"

    local modulesdir="$pkgdir/usr/lib/modules/$(<version)"

    echo "Installing boot image..."
    # systemd expects to find the kernel here to allow hibernation
    # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
    install -Dm644 "$(make -s image_name)" "$modulesdir/vmlinuz"

    # Used by mkinitcpio to name the kernel
    echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

    echo "Installing modules..."
    ZSTD_CLEVEL=19 make "${BUILD_FLAGS[@]}" INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 \
        DEPMOD=/doesnt/exist  modules_install  # Suppress depmod

    # remove build links
    rm "$modulesdir"/build

    # Generate performance tuning script
    _generate_tuning_script
}

_package-headers() {
    pkgdesc="Headers and scripts for building modules for the $pkgdesc kernel"
    depends=('pahole' "${pkgbase}")

    if _is_lto_kernel; then
        provides+=(linux-cachyos-lto-headers=$_kernver)
        replaces=(linux-cachyos-lto-headers)
        depends+=(clang llvm lld)
    fi

    cd "${_srcname}"
    local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

    echo "Installing build files..."
    install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
        localversion.* version vmlinux tools/bpf/bpftool/vmlinux.h
    install -Dt "$builddir/kernel" -m644 kernel/Makefile
    install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
    cp -t "$builddir" -a scripts
    ln -srt "$builddir" "$builddir/scripts/gdb/vmlinux-gdb.py"

    # required when STACK_VALIDATION is enabled
    install -Dt "$builddir/tools/objtool" tools/objtool/objtool

    # required when DEBUG_INFO_BTF_MODULES is enabled
    if [ -f tools/bpf/resolve_btfids/resolve_btfids ]; then
        install -Dt "$builddir/tools/bpf/resolve_btfids" tools/bpf/resolve_btfids/resolve_btfids
    fi

    echo "Installing headers..."
    cp -t "$builddir" -a include
    cp -t "$builddir/arch/x86" -a arch/x86/include
    install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

    install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
    install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

    # https://bugs.archlinux.org/task/13146
    install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

    # https://bugs.archlinux.org/task/20402
    install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
    install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
    install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

    # https://bugs.archlinux.org/task/71392
    install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

    echo "Installing KConfig files..."
    find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

    # Install .rmeta files if they exist
    if compgen -G "rust/*.rmeta" 1>/dev/null; then
        install -Dt "$builddir/rust" -m644 rust/*.rmeta
    fi

    # Install .so files if they exist
    if compgen -G "rust/*.so" 1>/dev/null; then
        install -Dt "$builddir/rust" rust/*.so
    fi

    echo "Installing unstripped VDSO..."
    make INSTALL_MOD_PATH="$pkgdir/usr" vdso_install \
      link=  # Suppress build-id symlinks

    echo "Removing unneeded architectures..."
    local arch
    for arch in "$builddir"/arch/*/; do
        [[ $arch = */x86/ ]] && continue
        echo "Removing $(basename "$arch")"
        rm -r "$arch"
    done

    echo "Removing documentation..."
    rm -r "$builddir/Documentation"

    echo "Removing broken symlinks..."
    find -L "$builddir" -type l -printf 'Removing %P\n' -delete

    echo "Removing loose objects..."
    find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

    echo "Stripping build tools..."
    local file
    while read -rd '' file; do
        case "$(file -Sib "$file")" in
            application/x-sharedlib\;*)      # Libraries (.so)
                strip -v $STRIP_SHARED "$file" ;;
            application/x-archive\;*)        # Libraries (.a)
                strip -v $STRIP_STATIC "$file" ;;
            application/x-executable\;*)     # Binaries
                strip -v $STRIP_BINARIES "$file" ;;
            application/x-pie-executable\;*) # Relocatable binaries
                strip -v $STRIP_SHARED "$file" ;;
        esac
    done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

    echo "Stripping vmlinux..."
    strip -v $STRIP_STATIC "$builddir/vmlinux"

    echo "Adding symlink..."
    mkdir -p "$pkgdir/usr/src"
    ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}

_package-dbg(){
    pkgdesc="Non-stripped vmlinux file for the $pkgdesc kernel"
    depends=("${pkgbase}-headers")

    cd "${_srcname}"
    mkdir -p "$pkgdir/usr/src/debug/${pkgbase}"
    install -Dt "$pkgdir/usr/src/debug/${pkgbase}" -m644 vmlinux
}

_package-zfs(){
    pkgdesc="zfs module for the $pkgdesc kernel"
    depends=('pahole' "${pkgbase}=${_kernver}")
    provides=('ZFS-MODULE')
    license=('CDDL')

    cd "$_srcname"
    local modulesdir="$pkgdir/usr/lib/modules/$(<version)"

    cd "${srcdir}/zfs"
    install -dm755 "${modulesdir}"
    install -m644 module/*.ko "${modulesdir}"

    _sign_modules "${modulesdir}"
    find "$pkgdir" -name '*.ko' -exec zstd --rm -19 -T0 {} +
    #  sed -i -e "s/EXTRAMODULES='.*'/EXTRAMODULES='${pkgver}-${pkgbase}'/" "$startdir/zfs.install"
}

_package-nvidia(){
    pkgdesc="nvidia module of ${_nv_ver} driver for the ${pkgbase} kernel"
    depends=("$pkgbase=$_kernver" "nvidia-utils=${_nv_ver}" "libglvnd")
    provides=('NVIDIA-MODULE')
    conflicts=("$pkgbase-nvidia-open")
    license=('custom')

    cd "$_srcname"
    local modulesdir="$pkgdir/usr/lib/modules/$(<version)"

    cd "${srcdir}/${_nv_pkg}"
    install -dm755 "${modulesdir}"
    install -m644 kernel/*.ko "${modulesdir}"
    install -Dt "$pkgdir/usr/share/licenses/${pkgname}" -m644 LICENSE

    _sign_modules "${modulesdir}"
    find "$pkgdir" -name '*.ko' -exec zstd --rm -19 -T0 {} +
}

_package-nvidia-open(){
    pkgdesc="nvidia open modules of ${_nv_ver} driver for the ${pkgbase} kernel"
    depends=("$pkgbase=$_kernver" "nvidia-utils=${_nv_ver}" "libglvnd")
    provides=('NVIDIA-MODULE')
    conflicts=("$pkgbase-nvidia")
    license=('MIT AND GPL-2.0-only')

    cd "$_srcname"
    local modulesdir="$pkgdir/usr/lib/modules/$(<version)"

    cd "${srcdir}/${_nv_open_pkg}"
    install -dm755 "${modulesdir}"
    install -m644 kernel-open/*.ko "${modulesdir}"
    install -Dt "$pkgdir/usr/share/licenses/${pkgname}" -m644 COPYING

    _sign_modules "${modulesdir}"
    find "$pkgdir" -name '*.ko' -exec zstd --rm -19 -T0 {} +
}

pkgname=("$pkgbase")
[ "$_build_debug" = "yes" ] && pkgname+=("$pkgbase-dbg")
pkgname+=("$pkgbase-headers")
[ "$_build_zfs" = "yes" ] && pkgname+=("$pkgbase-zfs")
[ "$_build_nvidia" = "yes" ] && pkgname+=("$pkgbase-nvidia")
[ "$_build_nvidia_open" = "yes" ] && pkgname+=("$pkgbase-nvidia-open")
for _p in "${pkgname[@]}"; do
    eval "package_$_p() {
    $(declare -f "_package${_p#$pkgbase}")
    _package${_p#$pkgbase}
    }"
done

b2sums=('251feef2f995c155850eac2fce5b89f37f39e9f13b6a4e6873370fdc69654692c6bf6c92f04ca7c0b5fd6088d74442afb68db71d2cc18691e23c61b0be714f34'
        'ca08c1ad172af846ccf78e3694713a68191fec6e59fba5e0a6c90ba228fac5eab77fb8603f35190586d77f6acbf6f87fdb3a1c835d2d68e635c5e1e4d7e7ebe8'
        '10333c7ee4e2a30fc109d138e4d9b09ae49cd0396e0e72a5379ba7ab344dfddf4f26b00788a497c67b151ca3cfd56ef50c4cf99c9928214ca9215a2a1f6025e7'
        'c7294a689f70b2a44b0c4e9f00c61dbd59dd7063ecbe18655c4e7f12e21ed7c5bb4f5169f5aa8623b1c59de7b2667facb024913ecb9f4c650dabce4e8a7e5452'
        'c7f5b2e6c1f95ec961666c338057501a41f3e8de584f0985021b4c5c0ce5ddf738b56f2c50fe33d879a9cddd2236c26fb995c03445cab93580379d2e2c4669cc')
